class SingletonMeta(type):
    """
    Метакласс, реализующий паттерн "Синглтон".

    Этот метакласс гарантирует, что у класса, использующего его,
    будет только один экземпляр.
    """
    _instances = {}

    def __call__(cls, *args, **kwargs):
        """
        Вызывается при создании нового экземпляра класса.

        Если экземпляр класса еще не существует, он создается и сохраняется
        в словаре `_instances`. Если экземпляр уже существует, то возвращается
        существующий экземпляр.

        Args:
            *args: Произвольные позиционные аргументы, передаваемые конструктору класса.
            **kwargs: Произвольные именованные аргументы, передаваемые конструктору класса.

        Returns:
            Экземпляр класса (единственный).
        """
        if cls not in cls._instances:
            cls._instances[cls] = super().__call__(*args, **kwargs)
        return cls._instances[cls]


class Singleton(metaclass=SingletonMeta):
    """
    Класс, реализующий паттерн "Синглтон" с использованием метакласса `SingletonMeta`.

    Атрибуты:
        value: Значение, хранящееся в экземпляре класса.
    """
    def __init__(self, value):
        """
        Конструктор класса.

        Args:
            value: Значение для инициализации атрибута `value`.
        """
        self.value = value


# Пример использования
singleton1 = Singleton("Первый экземпляр")
singleton2 = Singleton("Второй экземпляр")

print(singleton1 is singleton2)  # Вывод: True
print(singleton1.value)  # Вывод: Первый экземпляр
